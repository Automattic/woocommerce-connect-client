# Travis CI Configuration File

# Tell Travis CI we're using PHP
language: php

# PHP version used in first build configuration.
php:
    - 5.6

# WordPress version used in first build configuration.
env:
    - WP_VERSION=latest

# Next we define our matrix of additional build configurations to test against.
# The versions listed above will automatically create our first configuration,
# so it doesn't need to be re-defined below.

# Test WP trunk/master and two latest versions on minimum (5.2).
# Test WP latest two versions (4.4, 4.4) on most popular (5.5, 5.6).
# Test WP latest stable (4.4) on other supported PHP (5.3, 5.4).
# Test WP trunk/master on edge platforms (7.0, hhvm, PHP nightly).

# WP_VERSION specifies the tag to use. The way these tests are configured to run
# requires at least WordPress 3.8. Specify "master" to test against SVN trunk.

matrix:
  include:
   - php: 5.2
     env: WP_VERSION=latest
   - php: 5.2
     env: WP_VERSION=4.4
   - php: 5.3
     env: WP_VERSION=latest
   - php: 5.3
     env: WP_VERSION=4.4
   - php: 5.4
     env: WP_VERSION=latest
   - php: 5.4
     env: WP_VERSION=4.4
   - php: 5.5
     env: WP_VERSION=latest
   - php: 5.5
     env: WP_VERSION=4.4
     # 5.6 / master already included above as first build.
   - php: 5.6
     env: WP_VERSION=4.4

# Cache the NPM dependencies
cache:
  directories:
    - node_modules
    - "$HOME/.nvm"

# Use an updated Node runtime
# See: http://entulho.fiatjaf.alhur.es/guias/how-to-use-node-along-with-other-language-on-travis-ci/
install:
    - . $HOME/.nvm/nvm.sh
    - nvm install 6.9.0
    - nvm use 6.9.0
    - npm install

# Clones WordPress and configures our testing environment.
before_script:
    - bash tests/bin/install-wc-tests.sh wordpress_test travis '' localhost $WP_VERSION
    # Following courtesy of: https://raw.githubusercontent.com/WordPress/twentyseventeen/master/.travis.yml
    # Install CodeSniffer for WordPress Coding Standards checks.
    - mkdir /tmp/woocommerce/php-codesniffer && curl -L https://github.com/squizlabs/PHP_CodeSniffer/archive/master.tar.gz | tar xz --strip-components=1 -C /tmp/woocommerce/php-codesniffer
    # Install WordPress Coding Standards.
    - mkdir /tmp/woocommerce/wordpress-coding-standards && curl -L https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/archive/master.tar.gz | tar xz --strip-components=1 -C /tmp/woocommerce/wordpress-coding-standards
    # Set install path for WordPress Coding Standards
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - /tmp/woocommerce/php-codesniffer/scripts/phpcs --config-set installed_paths /tmp/woocommerce/wordpress-coding-standards
    # After CodeSniffer install you should refresh your path.
    - phpenv rehash

script:
    # Search theme for PHP syntax errors.
    - find . \( -name '*.php' \) -exec php -lf {} \;
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - /tmp/woocommerce/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php
    - phpunit && npm test

sudo: false

notifications:
   email:
       - hydra@matticspace.com